#set( $skip = $propFile.query_skip.split(",") )
package $propFile.query_package

import (
  "context"

  "github.com/algorand/go-algorand-sdk/client/v2/common"
)

const authHeader = "$propFile.auth_header"

type Client common.Client

// get performs a GET request to the specific path against the server, assumes JSON response
func (c *Client) get(ctx context.Context, response interface{}, path string, body interface{}, headers []*common.Header) error {
       return (*common.Client)(c).Get(ctx, response, path, body, headers)
}

// getMsgpack performs a GET request to the specific path against the server, assumes msgpack response
func (c *Client) getMsgpack(ctx context.Context, response interface{}, path string, body interface{}, headers []*common.Header) error {
       return (*common.Client)(c).GetRawMsgpack(ctx, response, path, body, headers)
}

// getMsgpack performs a GET request to the specific path against the server, assumes msgpack response
func (c *Client) getRaw(ctx context.Context, path string, body interface{}, headers []*common.Header) ([]byte, error) {
       return (*common.Client)(c).GetRaw(ctx, path, body, headers)
}

// post sends a POST request to the given path with the given request object.
// No query parameters will be sent if request is nil.
// response must be a pointer to an object as post writes the response there.
func (c *Client) post(ctx context.Context, response interface{}, path string, body interface{}, headers []*common.Header) error {
       return (*common.Client)(c).Post(ctx, response, path, body, headers)
}

// MakeClient is the factory for constructing a ClientV2 for a given endpoint.
func MakeClient(address string, apiToken string) (c *Client, err error) {
       commonClient, err := common.MakeClient(address, authHeader, apiToken)
       c = (*Client)(commonClient)
       return
}


/*
#foreach( $q in $queries )
#set( $queryType = "$go.queryTypeMapper(${str.capitalize($q.name)})" )
#if ( ! $skip.contains($queryType) )

func (c *Client) $queryType() *$queryType {
  return &${queryType}{c: c}
}
#end
#end
*/
